//////////////////// ALL ASSIGNMENTS INCLUDE THIS SECTION /////////////////////
//
// Title:           SEQUENCE GENERATOR
// Files:           Sequence.java, GeometricSequenceGenerator.java, FibonacciSequenceGenerator.java,
//                  DigitProductSequenceGenerator.java, SequenceGeneratorTests.java
// Course:          CS300 Fall 2018
//
// Author:          Bryce Xu
// Email:           xxu373@wisc.edu
// Lecturer's Name: Mouna Kacem
//
//////////////////// PAIR PROGRAMMERS COMPLETE THIS SECTION ///////////////////
//
// Partner Name:    None
// Partner Email:   None
// Partner Lecturer's Name: None
// 
// VERIFY THE FOLLOWING BY PLACING AN X NEXT TO EACH TRUE STATEMENT:
//   ___ Write-up states that pair programming is allowed for this assignment.
//   ___ We have both read and understand the course Pair Programming Policy.
//   ___ We have registered our team prior to the team registration deadline.
//
///////////////////////////// CREDIT OUTSIDE HELP /////////////////////////////
//
// Students who get help from sources other than their partner must fully 
// acknowledge and credit those sources of help here.  Instructors and TAs do 
// not need to be credited here, but tutors, friends, relatives, room mates, 
// strangers, and others do.  If you received no outside help from either type
//  of source, then please explicitly indicate NONE.
//
// Persons:         None
// Online Sources:  None
//
/////////////////////////////// 80 COLUMNS WIDE ///////////////////////////////

import java.util.Iterator;

/**
 * This class represents a generator for a geometric progression 
 * This class implements the Iterator<Integer> interface
 *
 * @author Bryce Xu
 */
public class GeometricSequenceGenerator implements Iterator<Integer> {
  private final int SIZE; // The number of elements in this sequence
  private final int INIT; // The first term in this sequence
  private final int RATIO; // The common ratio for this sequence
  private int next; // The next term in the sequence

  private int generatedCount; // The number of terms generated so far in this sequence
  // It refers also to the order of the next number to be generated by next() method

  /**
   * Generates a geometric progression
   * @param init initial value
   * @param ratio times to be multiplied
   * @param size number of elements in the sequence
   */
  public GeometricSequenceGenerator(int init, int ratio, int size) {
    if (size <= 0) { // check for the precondition: size > 0, throws an IllegalArgumentException 
                     // if this precondition is not satisfied
      throw new IllegalArgumentException("WARNING: CANNOT create a sequence with size <= zero.");
    }
    if (init <= 0 || ratio <= 0) {
      // check for the validity of init > 0 and ratio > 0 
      // throw an IllegalArgumentException if these two parameters are not valid
      throw new IllegalArgumentException(
          "WARNING: The starting element and the common ratio for a geometric "
              + "progression should be STRICTLY POSITIVE.");
    }
    // initialize the instance field
    this.INIT = init;
    this.RATIO = ratio;
    this.SIZE = size;
    this.next = init;
    generatedCount = 0;
  }

  /**
   * Checks if the iteration has a next element in this sequence
   * @return true if the current element in the iteration has a next element in this sequence, false
   *         otherwise
   */
  @Override
  public boolean hasNext() {
    // Time Complexity: O(1)
    return generatedCount < SIZE;
  }

  /**
   * Returns the next element in this geometric sequence iteration with respect to the numbers
   * generated so far
   * @return the next element in this iteration
   */
  @Override
  public Integer next() {
    // Time Complexity: O(1)
    if (!hasNext()) { // check if the current element has a next element in this sequence
      return null;
    }
    int current = next; // set the current element to next
    generatedCount++;
    next *= RATIO;      // set the next element
    return current;     // return the next element
  }

}
